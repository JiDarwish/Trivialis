// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  schemas  = ["waitingListApp", "markuApp"]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("markuApp")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("markuApp")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  company       Company?
  @@schema("markuApp")
}

model Company {
  id                      String         @id @default(cuid())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  name                    String
  websiteLink             String
  description             String?
  toneAndVoice            String?        @db.Text
  preferredTargetAudiance String?        @db.Text
  socialMediaLinks        String?        @db.Text
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String         @unique
  campaigns               Campaign[]
  report                  CompanyReport?
  @@schema("markuApp")
}

model CompanyReport {
  id                   String  @id @default(cuid())
  competitors          String? @db.Text
  socialMediaApps      String? @db.Text
  industriesAndSectors String? @db.Text
  keySellingPoints     String? @db.Text
  subreddits           String? @db.Text
  newReleases          String? @db.Text
  company              Company @relation(fields: [companyId], references: [id])
  companyId            String  @unique
  @@schema("markuApp")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("markuApp")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  goal        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  elements    Element[]
  @@schema("markuApp")
}

model Element {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  posts       Post[]
  @@schema("markuApp")
}

model Post {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  element     Element  @relation(fields: [elementId], references: [id], onDelete: Cascade)
  elementId   String
  @@schema("markuApp")
}


model WaitingListUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique


  @@schema("waitingListApp")
}
